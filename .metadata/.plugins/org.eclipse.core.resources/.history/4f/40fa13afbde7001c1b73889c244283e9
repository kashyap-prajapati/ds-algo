package com.algorithm.gd.kruskal;

import java.util.Arrays;

public class Main {
	
	static class Edge implements Comparable<Edge>{
		int src;
		int dest;
		int weight;
		
		@Override
		public int compareTo(Edge o) {
			return this.weight=o.weight;
		}
		
	}
	
	static class subset {
		int parent;
		int rank;
	}
	
	int V,E;
	Edge edge[];
	
	
	Main(int v, int e){
		V = v;
        E = e;
        edge = new Edge[E];
        for (int i = 0; i < e; ++i)
            edge[i] = new Edge();
	}
	
	int find(subset subsets[], int i){
        if (subsets[i].parent!= i)
            subsets[i].parent=find(subsets, subsets[i].parent);
        return subsets[i].parent;
    }
	
	 void union(subset subsets[], int x, int y){
        int xroot = find(subsets, x);
        int yroot = find(subsets, y);
        if (subsets[xroot].rank < subsets[yroot].rank)
            subsets[xroot].parent = yroot;
        else if (subsets[xroot].rank > subsets[yroot].rank)
            subsets[yroot].parent = xroot;
        else {
            subsets[yroot].parent = xroot;
            subsets[xroot].rank++;
        }
	 }
	 
	 void KruskalMST()
	    {
	        // This will store the resultant MST
	        Edge result[] = new Edge[V];
	        int e = 0;
	        int i = 0;
	        for (i = 0; i < V; ++i)
	            result[i] = new Edge();
	        Arrays.sort(edge);
	 
	        // Allocate memory for creating V subsets
	        subset subsets[] = new subset[V];
	        for (i = 0; i < V; ++i)
	            subsets[i] = new subset();
	 
	        // Create V subsets with single elements
	        for (int v = 0; v < V; ++v)
	        {
	            subsets[v].parent = v;
	            subsets[v].rank = 0;
	        }
	 
	        i = 0; // Index used to pick next edge
	 
	        // Number of edges to be taken is equal to V-1
	        while (e < V - 1)
	        {
	            // Step 2: Pick the smallest edge. And increment
	            // the index for next iteration
	            Edge next_edge = edge[i++];
	 
	            int x = find(subsets, next_edge.src);
	            int y = find(subsets, next_edge.dest);
	 
	            // If including this edge doesn't cause cycle,
	            // include it in result and increment the index
	            // of result for next edge
	            if (x != y) {
	                result[e++] = next_edge;
	                union(subsets, x, y);
	            }
	            // Else discard the next_edge
	        }
	 
	        // print the contents of result[] to display
	        // the built MST
	        System.out.println("Following are the edges in "
	                           + "the constructed MST");
	        int minimumCost = 0;
	        for (i = 0; i < e; ++i)
	        {
	            System.out.println(result[i].src + " -- "
	                               + result[i].dest
	                               + " == " + result[i].weight);
	            minimumCost += result[i].weight;
	        }
	        System.out.println("Minimum Cost Spanning Tree "
	                           + minimumCost);
	    }
	 
	    // Driver Code
	    public static void main(String[] args)
	    {
	    }

}

