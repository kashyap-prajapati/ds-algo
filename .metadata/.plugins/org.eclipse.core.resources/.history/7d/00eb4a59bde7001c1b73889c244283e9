package com.algorithm.gd.kruskal;

public class Main {
	
	static class Edge implements Comparable<Edge>{
		int src;
		int dest;
		int weight;
		
		@Override
		public int compareTo(Edge o) {
			return this.weight=o.weight;
		}
		
	}
	
	static class subset {
		int parent;
		int rank;
	}
	
	int V,E;
	Edge edge[];
	
	
	Main(int v, int e){
		V = v;
        E = e;
        edge = new Edge[E];
        for (int i = 0; i < e; ++i)
            edge[i] = new Edge();
	}
	
	int find(subset subsets[], int i){
        if (subsets[i].parent!= i)
            subsets[i].parent=find(subsets, subsets[i].parent);
        return subsets[i].parent;
    }
	
	 void Union(subset subsets[], int x, int y)
	    {
	        int xroot = find(subsets, x);
	        int yroot = find(subsets, y);
	 
	        // Attach smaller rank tree under root
	        // of high rank tree (Union by Rank)
	        if (subsets[xroot].rank
	            < subsets[yroot].rank)
	            subsets[xroot].parent = yroot;
	        else if (subsets[xroot].rank
	                 > subsets[yroot].rank)
	            subsets[yroot].parent = xroot;
	 
	        // If ranks are same, then make one as
	        // root and increment its rank by one
	        else {
	            subsets[yroot].parent = xroot;
	            subsets[xroot].rank++;
	        }
	    }
}
